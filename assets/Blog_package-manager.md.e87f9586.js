import{_ as n,c as a,o as r,f as e}from"./app.a423845e.js";const u=JSON.parse('{"title":"包管理","description":"","frontmatter":{},"headers":[{"level":2,"title":"npm、yarn、pnpm、npx的区别","slug":"npm、yarn、pnpm、npx的区别","link":"#npm、yarn、pnpm、npx的区别","children":[]},{"level":2,"title":"nrm、yrm的区别","slug":"nrm、yrm的区别","link":"#nrm、yrm的区别","children":[]},{"level":2,"title":"指定版本","slug":"指定版本","link":"#指定版本","children":[]}],"relativePath":"Blog/package-manager.md","lastUpdated":1665897289000}'),l={name:"Blog/package-manager.md"},t=e('<h1 id="包管理" tabindex="-1">包管理 <a class="header-anchor" href="#包管理" aria-hidden="true">#</a></h1><h2 id="npm、yarn、pnpm、npx的区别" tabindex="-1">npm、yarn、pnpm、npx的区别 <a class="header-anchor" href="#npm、yarn、pnpm、npx的区别" aria-hidden="true">#</a></h2><p>npm@5之后的版本各方面已经和yarn在同一水平。<br> npx是npm@5.2的产物，方便使用一次就丢弃的情况,不会全局安装。<br> yarn解决了npm@5之前的一些让人诟病的问题，同时拥有一些其它的优点。例如离线安装、失败自动重试安装和并行下载等。<br> pnpm通过连接的方式，让多个项目使用共同的依赖，大大节省了磁盘空间，比yarn和npm下载速度快得多，但也有连接带来的各种兼容问题。</p><h2 id="nrm、yrm的区别" tabindex="-1">nrm、yrm的区别 <a class="header-anchor" href="#nrm、yrm的区别" aria-hidden="true">#</a></h2><p>nrm、yrm是npm的镜像源管理工具，可以快速切换npm源<br> nrm无法修改yarn的镜像源<br> yrm可以同步修改npm和yarn镜像源</p><h2 id="指定版本" tabindex="-1">指定版本 <a class="header-anchor" href="#指定版本" aria-hidden="true">#</a></h2><p>我们可以通过 ^、 ~、 *来指定版本号</p><ul><li>^ 表示与版本兼容，指从最左边非0算起，该数值不能变 <ul><li>版本号 ^2.1.0：指 &gt;=2.1.0 但&lt; 3.0.0</li><li>版本号^0.2.1：指&gt;=0.2.1 但 &lt;0.3.0</li><li>版本号^0.1.0: 指 &gt;=0.1.0 但 &lt;0.2.0</li></ul></li><li>~ 表示次版本号的更新规则，指从最右边非0算起，该数值不能变 <ul><li>~2.1.0：指&gt;=2.1.0但 &lt;2.2.0</li><li>~2.0.0：指&gt;=2.0.0 但 ❤️.0.0 因为次版本号为0</li></ul></li><li>*表示任意版本，永远更新最新版本</li><li>-表示版本区间 <ul><li>1.2.1-1.6.5：指1.2.1与1.6.5间的任意版本</li></ul></li></ul><p>latest：最新发布版本<br> next：最新未发布版本</p>',9),i=[t];function p(m,d,s,c,h,o){return r(),a("div",null,i)}const y=n(l,[["render",p]]);export{u as __pageData,y as default};
