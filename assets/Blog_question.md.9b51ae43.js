import{_ as s,c as a,o as l,f as n}from"./app.a423845e.js";const e="/assets/20200715170108916.2472b9f4.png",o="/assets/20200715170121834.816846d2.png",t="/assets/16ca74f183827f46.214c4eb1.png",A=JSON.parse('{"title":"八股文","description":"","frontmatter":{},"headers":[{"level":2,"title":"Doctype 作用？","slug":"doctype-作用","link":"#doctype-作用","children":[]},{"level":2,"title":"盒模型","slug":"盒模型","link":"#盒模型","children":[]},{"level":2,"title":"什么是重排和重绘","slug":"什么是重排和重绘","link":"#什么是重排和重绘","children":[]},{"level":2,"title":"CSS 如何开启 GPU 加速","slug":"css-如何开启-gpu-加速","link":"#css-如何开启-gpu-加速","children":[]},{"level":2,"title":"传统布局方式有哪些","slug":"传统布局方式有哪些","link":"#传统布局方式有哪些","children":[]},{"level":2,"title":"css 选择器权重","slug":"css-选择器权重","link":"#css-选择器权重","children":[]},{"level":2,"title":"简述 cookie、localstorage、seesionstorage","slug":"简述-cookie、localstorage、seesionstorage","link":"#简述-cookie、localstorage、seesionstorage","children":[]},{"level":2,"title":"如何实现前端跨域","slug":"如何实现前端跨域","link":"#如何实现前端跨域","children":[]},{"level":2,"title":"浏览器攻击方式","slug":"浏览器攻击方式","link":"#浏览器攻击方式","children":[]},{"level":2,"title":"get 和 post 请求的区别","slug":"get-和-post-请求的区别","link":"#get-和-post-请求的区别","children":[]},{"level":2,"title":"http 和 https 区别","slug":"http-和-https-区别","link":"#http-和-https-区别","children":[]},{"level":2,"title":"说一下 http 状态码有那些","slug":"说一下-http-状态码有那些","link":"#说一下-http-状态码有那些","children":[]},{"level":2,"title":"说一下从 url 输入到返回请求的过程","slug":"说一下从-url-输入到返回请求的过程","link":"#说一下从-url-输入到返回请求的过程","children":[]},{"level":2,"title":"用一句话说下什么是 javaScript","slug":"用一句话说下什么是-javascript","link":"#用一句话说下什么是-javascript","children":[]},{"level":2,"title":"事件循环","slug":"事件循环","link":"#事件循环","children":[]},{"level":2,"title":"var、let、const 的区别","slug":"var、let、const-的区别","link":"#var、let、const-的区别","children":[]},{"level":2,"title":"Promise 各方法的区别","slug":"promise-各方法的区别","link":"#promise-各方法的区别","children":[]},{"level":2,"title":"什么是闭包","slug":"什么是闭包","link":"#什么是闭包","children":[]},{"level":2,"title":"原型对象的终点是什么","slug":"原型对象的终点是什么","link":"#原型对象的终点是什么","children":[]},{"level":2,"title":"undefined 和 null 的区别","slug":"undefined-和-null-的区别","link":"#undefined-和-null-的区别","children":[]},{"level":2,"title":"undefined 和 null 的用途","slug":"undefined-和-null-的用途","link":"#undefined-和-null-的用途","children":[]},{"level":2,"title":"JS 的基本数据类型和引用数据类型","slug":"js-的基本数据类型和引用数据类型","link":"#js-的基本数据类型和引用数据类型","children":[]},{"level":2,"title":"包装对象有哪些？","slug":"包装对象有哪些","link":"#包装对象有哪些","children":[]},{"level":2,"title":"继承原理","slug":"继承原理","link":"#继承原理","children":[]},{"level":2,"title":"浅拷贝:","slug":"浅拷贝","link":"#浅拷贝","children":[]},{"level":2,"title":"深拷贝:","slug":"深拷贝","link":"#深拷贝","children":[]},{"level":2,"title":"es6 新特性","slug":"es6-新特性","link":"#es6-新特性","children":[]},{"level":2,"title":"类的用法","slug":"类的用法","link":"#类的用法","children":[]},{"level":2,"title":"导入/导出的用法","slug":"导入-导出的用法","link":"#导入-导出的用法","children":[]},{"level":2,"title":"call、apply、bind 区别","slug":"call、apply、bind-区别","link":"#call、apply、bind-区别","children":[]},{"level":2,"title":"改变 this 指向的有哪些？","slug":"改变-this-指向的有哪些","link":"#改变-this-指向的有哪些","children":[]},{"level":2,"title":"new 操作符做了什么","slug":"new-操作符做了什么","link":"#new-操作符做了什么","children":[]},{"level":2,"title":"如何实现继承","slug":"如何实现继承","link":"#如何实现继承","children":[]},{"level":2,"title":"for...in 和 for...of 的区别","slug":"for-in-和-for-of-的区别","link":"#for-in-和-for-of-的区别","children":[]},{"level":2,"title":"什么是原型链","slug":"什么是原型链","link":"#什么是原型链","children":[]},{"level":2,"title":"在哪个生命周期内调用异步请求","slug":"在哪个生命周期内调用异步请求","link":"#在哪个生命周期内调用异步请求","children":[]},{"level":2,"title":"简述 Vue 响应式原理","slug":"简述-vue-响应式原理","link":"#简述-vue-响应式原理","children":[]},{"level":2,"title":"说一下 v-model 的原理","slug":"说一下-v-model-的原理","link":"#说一下-v-model-的原理","children":[]},{"level":2,"title":"Vue 组件中 data 为什么必须是函数","slug":"vue-组件中-data-为什么必须是函数","link":"#vue-组件中-data-为什么必须是函数","children":[]},{"level":2,"title":"vue 生命周期钩子函数有哪些","slug":"vue-生命周期钩子函数有哪些","link":"#vue-生命周期钩子函数有哪些","children":[]},{"level":2,"title":"组件之间是怎么通信的","slug":"组件之间是怎么通信的","link":"#组件之间是怎么通信的","children":[]},{"level":2,"title":"vue 执行顺序","slug":"vue-执行顺序","link":"#vue-执行顺序","children":[]},{"level":2,"title":"Vue 核心特性","slug":"vue-核心特性","link":"#vue-核心特性","children":[]},{"level":2,"title":"Vue Router 的导航方法","slug":"vue-router-的导航方法","link":"#vue-router-的导航方法","children":[]},{"level":2,"title":"query传参和params传参区别","slug":"query传参和params传参区别","link":"#query传参和params传参区别","children":[]},{"level":2,"title":"v-if 和 v-for 为什么不能放在一起","slug":"v-if-和-v-for-为什么不能放在一起","link":"#v-if-和-v-for-为什么不能放在一起","children":[]},{"level":2,"title":"v-if 和 v-for 哪个优先级高","slug":"v-if-和-v-for-哪个优先级高","link":"#v-if-和-v-for-哪个优先级高","children":[]},{"level":2,"title":"key 的作用","slug":"key-的作用","link":"#key-的作用","children":[]},{"level":2,"title":"为什么不建议用 index 作为 key?","slug":"为什么不建议用-index-作为-key","link":"#为什么不建议用-index-作为-key","children":[]},{"level":2,"title":"query传参和params传参区别","slug":"query传参和params传参区别-1","link":"#query传参和params传参区别-1","children":[]},{"level":2,"title":"computed 和 watch,methods 有什么区别","slug":"computed-和-watch-methods-有什么区别","link":"#computed-和-watch-methods-有什么区别","children":[]},{"level":2,"title":"那你能讲一讲 MVVM 吗","slug":"那你能讲一讲-mvvm-吗","link":"#那你能讲一讲-mvvm-吗","children":[]},{"level":2,"title":"双向绑定的原理","slug":"双向绑定的原理","link":"#双向绑定的原理","children":[]},{"level":2,"title":"keep-alive 了解吗","slug":"keep-alive-了解吗","link":"#keep-alive-了解吗","children":[]},{"level":2,"title":"vuex","slug":"vuex","link":"#vuex","children":[]},{"level":2,"title":"watch 怎么深度监听对象变化","slug":"watch-怎么深度监听对象变化","link":"#watch-怎么深度监听对象变化","children":[]},{"level":2,"title":"如何解决 Vue 中给对象添加新属性界面不刷新?","slug":"如何解决-vue-中给对象添加新属性界面不刷新","link":"#如何解决-vue-中给对象添加新属性界面不刷新","children":[]},{"level":2,"title":"数组中的哪些方法会触发视图的更新?","slug":"数组中的哪些方法会触发视图的更新","link":"#数组中的哪些方法会触发视图的更新","children":[]},{"level":2,"title":"改变元数组的方法有哪些？","slug":"改变元数组的方法有哪些","link":"#改变元数组的方法有哪些","children":[]},{"level":2,"title":"vue3.0 的六大亮点","slug":"vue3-0-的六大亮点","link":"#vue3-0-的六大亮点","children":[]},{"level":2,"title":"uniapp 生命周期执行顺序","slug":"uniapp-生命周期执行顺序","link":"#uniapp-生命周期执行顺序","children":[]},{"level":2,"title":"Webpack 的基本功能","slug":"webpack-的基本功能","link":"#webpack-的基本功能","children":[]},{"level":2,"title":"Webpack 常见的 Loader","slug":"webpack-常见的-loader","link":"#webpack-常见的-loader","children":[]},{"level":2,"title":"常见的 Plugin","slug":"常见的-plugin","link":"#常见的-plugin","children":[]},{"level":2,"title":"网站性能优化","slug":"网站性能优化","link":"#网站性能优化","children":[]},{"level":2,"title":"git 常用命令","slug":"git-常用命令","link":"#git-常用命令","children":[]},{"level":2,"title":"其它","slug":"其它","link":"#其它","children":[]}],"relativePath":"Blog/question.md","lastUpdated":1671632578000}'),p={name:"Blog/question.md"},r=n('<h1 id="八股文" tabindex="-1">八股文 <a class="header-anchor" href="#八股文" aria-hidden="true">#</a></h1><h2 id="doctype-作用" tabindex="-1">Doctype 作用？ <a class="header-anchor" href="#doctype-作用" aria-hidden="true">#</a></h2><p>告知浏览器的解析器用什么文档标准解析这个文档</p><h2 id="盒模型" tabindex="-1">盒模型 <a class="header-anchor" href="#盒模型" aria-hidden="true">#</a></h2><p>box-sizing: content-box 是标准盒模型 默认属性<br> box-sizing: border-box 是 IE 盒模型 <img src="'+e+'" alt="图片1"><img src="'+o+`" alt="图片2"></p><h2 id="什么是重排和重绘" tabindex="-1">什么是重排和重绘 <a class="header-anchor" href="#什么是重排和重绘" aria-hidden="true">#</a></h2><p><strong>重排</strong>：部分或整个渲染树需要重新分析并且需要重新计算节点尺寸 (display:none)<br><strong>重绘</strong>：节点属性或样式发生变化 (visibility:hidden)</p><h2 id="css-如何开启-gpu-加速" tabindex="-1">CSS 如何开启 GPU 加速 <a class="header-anchor" href="#css-如何开启-gpu-加速" aria-hidden="true">#</a></h2><p>transform、opacity、filter、will-change<br> GPU 渲染字体会导致字体模糊，过多的 GPU 处理会导致内存问题</p><h2 id="传统布局方式有哪些" tabindex="-1">传统布局方式有哪些 <a class="header-anchor" href="#传统布局方式有哪些" aria-hidden="true">#</a></h2><p>普通流、浮动、定位</p><h2 id="css-选择器权重" tabindex="-1">css 选择器权重 <a class="header-anchor" href="#css-选择器权重" aria-hidden="true">#</a></h2><p>!important -&gt; 行内样式 -&gt; #id -&gt; .class -&gt; 元素和伪元素 -&gt; * -&gt; 继承 -&gt; 默认</p><h2 id="简述-cookie、localstorage、seesionstorage" tabindex="-1">简述 cookie、localstorage、seesionstorage <a class="header-anchor" href="#简述-cookie、localstorage、seesionstorage" aria-hidden="true">#</a></h2><table><thead><tr><th>名称</th><th>大小</th><th>网络请求</th><th>生命周期</th></tr></thead><tbody><tr><td>cookie</td><td>4kb 左右</td><td>携带在 HTTP 头中，cookie 保存数据过多会带来性能问题</td><td>默认是关闭浏览器后失效, 但是也可以设置过期时间</td></tr><tr><td>localstorage</td><td>10M</td><td>保存在浏览器中，不参与和服务器的通信</td><td>手动清除</td></tr><tr><td>SessionStorage</td><td>5M</td><td>保存在浏览器中，不参与和服务器的通信</td><td>关闭窗口或浏览器后被清除</td></tr></tbody></table><h2 id="如何实现前端跨域" tabindex="-1">如何实现前端跨域 <a class="header-anchor" href="#如何实现前端跨域" aria-hidden="true">#</a></h2><p>CORS、JSOP、postMessage、Iframe、nginx</p><h2 id="浏览器攻击方式" tabindex="-1">浏览器攻击方式 <a class="header-anchor" href="#浏览器攻击方式" aria-hidden="true">#</a></h2><p>xss、csrf(跨站点请求)、sql注入</p><h2 id="get-和-post-请求的区别" tabindex="-1">get 和 post 请求的区别 <a class="header-anchor" href="#get-和-post-请求的区别" aria-hidden="true">#</a></h2><table><thead><tr><th>get</th><th>post</th></tr></thead><tbody><tr><td>默认参数长度有限制    （不同浏览器长度不一致，最大 2048）（可通过浏览器和服务器配置）</td><td>默认参数长度无限制（可通过浏览器和服务器配置）</td></tr><tr><td>会把请求的数据附加在 url 上</td><td>请求会把数据附加在请求体中</td></tr><tr><td>是明文传输</td><td>不是明文传输（相对来说不是明文因为可以用开发工具可以看到）</td></tr><tr><td>请求能缓存</td><td>不能缓存</td></tr><tr><td>速度快（数据和请求头一起发送）</td><td>速度慢（因为先将请求头发送给服务器进行确认）</td></tr></tbody></table><h2 id="http-和-https-区别" tabindex="-1">http 和 https 区别 <a class="header-anchor" href="#http-和-https-区别" aria-hidden="true">#</a></h2><table><thead><tr><th>http</th><th>https</th></tr></thead><tbody><tr><td>80 端口</td><td>443 端口</td></tr><tr><td>无需申请证书</td><td>需要申请证书</td></tr><tr><td>超文本传输协议</td><td>ssl 加密协议</td></tr><tr><td>快</td><td>慢（因为会有一个 ssl 包需要传输）</td></tr></tbody></table><h2 id="说一下-http-状态码有那些" tabindex="-1">说一下 http 状态码有那些 <a class="header-anchor" href="#说一下-http-状态码有那些" aria-hidden="true">#</a></h2><p>200、2 开头请求成功<br> 302、3 开头重定向<br> 404、4 开头客户端请求错误<br> 500、5 开头服务器端请求错误<br> 详情见：<a href="https://www.runoob.com/http/http-status-codes.html" target="_blank" rel="noreferrer">https://www.runoob.com/http/http-status-codes.html</a></p><h2 id="说一下从-url-输入到返回请求的过程" tabindex="-1">说一下从 url 输入到返回请求的过程 <a class="header-anchor" href="#说一下从-url-输入到返回请求的过程" aria-hidden="true">#</a></h2><ol><li>进行 DNS 解析（就是把域名地址解析成 IP 地址） <ol><li>浏览器 DNS 缓存</li><li>系统 DNS 缓存</li><li>路由器 DNS 缓存</li><li>网络运营商 DNS 缓存</li><li>递归搜索 <a href="http://blog.baidu.com" target="_blank" rel="noreferrer">blog.baidu.com</a></li></ol></li><li>建立 TCP 连接（三次握手） <ol><li>由浏览器发起，告诉服务器，我要发送请求</li><li>由服务器发起，告诉浏览器，我准备好了，你发吧</li><li>由浏览器发起，告诉服务器，我发了，准备接收吧</li></ol></li><li>发送请求 <ol><li>请求报文</li></ol></li><li>发送响应 <ol><li>响应报文</li></ol></li><li>渲染页面（不一定按照顺序执行） <ol><li>遇见 html，浏览器调用 html 解析器，构建 dom 树</li><li>遇见 style/link，浏览器调用 css 解析器，构建 cssom 树</li><li>遇见 script，浏览器调用 javascript 解析器，处理 script 代码</li><li>将 dom 树和 cssom 树合并成渲染树</li><li>根据渲染树计算布局</li><li>将各节点颜色绘制到屏幕上</li></ol></li><li>断开 TCP 连接（四次挥手） <ol><li>由浏览器发起，告诉服务器，我东西发送完了（请求报文）</li><li>由服务器发起，告诉浏览器，我东西接收完了（请求报文），我准备关闭，你也准备吧</li><li>由服务器发起，告诉浏览器，我东西发送完了（响应报文），你准备关闭</li><li>由浏览器发起，告诉服务器，我东西接收完了（响应报文），我准备关闭，你也准备吧</li></ol></li></ol><h2 id="用一句话说下什么是-javascript" tabindex="-1">用一句话说下什么是 javaScript <a class="header-anchor" href="#用一句话说下什么是-javascript" aria-hidden="true">#</a></h2><p>简称 js,一种轻量级，单线程，解释性（翻译）的脚本语言</p><h2 id="事件循环" tabindex="-1">事件循环 <a class="header-anchor" href="#事件循环" aria-hidden="true">#</a></h2><p>javaScript 中分同步任务和异步任务，而异步任务还可以细分为宏任务和微任务<br><code>new</code> 会立即执行，<code>await</code> 会阻塞下面的代码（即加入微任务队列）<br> 如果排除<code>script</code>宏任务的话，那么微任务先执行</p><h2 id="var、let、const-的区别" tabindex="-1">var、let、const 的区别 <a class="header-anchor" href="#var、let、const-的区别" aria-hidden="true">#</a></h2><table><thead><tr><th>var</th><th>let</th><th>const</th></tr></thead><tbody><tr><td>函数作用域</td><td>块级作用域</td><td>块级作用域</td></tr><tr><td>支持变量提升</td><td>不支持变量提升</td><td>不支持变量提升</td></tr><tr><td>允许重复声明</td><td>不允许重复声明</td><td>不允许重复声明</td></tr><tr><td>可以通过 window.变量名进行访问</td><td>不能通过 window.变量名进行访问</td><td>不能通过 window.变量名进行访问</td></tr><tr><td>值可更改</td><td>值可更改</td><td>在同一作用域名值不可更改</td></tr><tr><td></td><td>暂存性死区</td><td>暂存性死区</td></tr></tbody></table><blockquote><p>暂存性死区：就是在我们声明之前是不能访问它们的。如果访问就抛出 ReferenceError  错误</p></blockquote><h2 id="promise-各方法的区别" tabindex="-1">Promise 各方法的区别 <a class="header-anchor" href="#promise-各方法的区别" aria-hidden="true">#</a></h2><table><thead><tr><th>方法</th><th>含义</th><th>结果</th></tr></thead><tbody><tr><td>Promise.all()</td><td>只要有一个失败就立即停止</td><td>返回第一个失败的值</td></tr><tr><td>Promise.allSettled()</td><td>无论成功或失败都返回</td><td>返回所有成功和失败的值</td></tr><tr><td>Promise.any()</td><td>只要有一个成功就立即停止</td><td>返回第一个成功的值</td></tr><tr><td>Promise.race()</td><td>任意一个成功或失败就立即停止</td><td>返回任意一个成功或失败的值</td></tr></tbody></table><h2 id="什么是闭包" tabindex="-1">什么是闭包 <a class="header-anchor" href="#什么是闭包" aria-hidden="true">#</a></h2><p>闭包就是子函数可以访问其他函数的作用域的数据</p><h2 id="原型对象的终点是什么" tabindex="-1">原型对象的终点是什么 <a class="header-anchor" href="#原型对象的终点是什么" aria-hidden="true">#</a></h2><p>是 null,用<code>Object.prototype.__proto__===null</code>来验证</p><h2 id="undefined-和-null-的区别" tabindex="-1">undefined 和 null 的区别 <a class="header-anchor" href="#undefined-和-null-的区别" aria-hidden="true">#</a></h2><p>undefined 不是关键字，而 null 是关键字<br> undefined 是参数默认值<br> undefined 和 null 的用途</p><h2 id="undefined-和-null-的用途" tabindex="-1">undefined 和 null 的用途 <a class="header-anchor" href="#undefined-和-null-的用途" aria-hidden="true">#</a></h2><p>undefined 定义基本类型,null 定义引用类型</p><h2 id="js-的基本数据类型和引用数据类型" tabindex="-1">JS 的基本数据类型和引用数据类型 <a class="header-anchor" href="#js-的基本数据类型和引用数据类型" aria-hidden="true">#</a></h2><p>基本数据类型：undefined、null、boolean、number、string、symbol（ES6）、bigInt（谷歌 67 版本）7——占用内存小，固定大小，一般存在栈内存当中，内存自动释放<br> 引用数据类型：object、array、function——占用内存大，不固定大小，一般存在堆内存当中，内存不会释放，指针是在栈内存中</p><h2 id="包装对象有哪些" tabindex="-1">包装对象有哪些？ <a class="header-anchor" href="#包装对象有哪些" aria-hidden="true">#</a></h2><p>new Number()、new String()、new Boolean()</p><h2 id="继承原理" tabindex="-1">继承原理 <a class="header-anchor" href="#继承原理" aria-hidden="true">#</a></h2><p>复制父类的属性和方法来重写子类的原型对象</p><h2 id="浅拷贝" tabindex="-1">浅拷贝: <a class="header-anchor" href="#浅拷贝" aria-hidden="true">#</a></h2><p>1、Object.assign 方法来实现<br> 2、扩展运算符 ...obj 3、for...in</p><h2 id="深拷贝" tabindex="-1">深拷贝: <a class="header-anchor" href="#深拷贝" aria-hidden="true">#</a></h2><p>1、JSON.parse(JSON.stringfy(object)) 此方法不支持 function 拷贝<br> 2、手写递归方法去实现</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">isObject</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">obj</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">object</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">function</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">deepClone</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">originValue</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// Symbol类型</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">originValue</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">symbol</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">originValue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">description</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 判断是否是对象</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#82AAFF;">isObject</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">originValue</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">originValue</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// set类型</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">originValue</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">instanceof</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Set</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newSet</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Set</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">setItem</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">of</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">originValue</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">newSet</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">deepClone</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">setItem</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newSet</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 判断是函数</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">originValue</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">function</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">originValue</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 判断返回值是数组还是对象</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newObj</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isArray</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">originValue</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> [] </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">Reflect</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    for </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">of</span><span style="color:#F07178;"> Reflect.ownKeys(</span><span style="color:#A6ACCD;font-style:italic;">originValue</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">originValue</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">] </span><span style="color:#676E95;font-style:italic;">// 让 SymbolKey的值不同</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">symbol</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newSymbolKey</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">description</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 将原来的值赋值给新生成的Symbol key</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">originValue</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newSymbolKey</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">newObj</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">deepClone</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    for </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">in</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">originValue</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">originValue</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">newObj</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">deepClone</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 对于Symbol类型的key forin 无法便利出来</span></span>
<span class="line"><span style="color:#F07178;">    const </span><span style="color:#A6ACCD;">symbolKeys</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getOwnPropertySymbols</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">originValue</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    for </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">symbolKey</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">in</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">symbolKeys</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">originSymbolValue</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">symbolKeys</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">symbolKey</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newSymbol</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">originSymbolValue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">description</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">newObj</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">newSymbol</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">deepClone</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">originValue</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">originSymbolValue</span><span style="color:#F07178;">])</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newObj</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> info </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">why</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">18</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">friend</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">kobe</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">running</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">[</span><span style="color:#82AAFF;">Symbol</span><span style="color:#F07178;">()]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> newObj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">deepCopy</span><span style="color:#A6ACCD;">(info)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="es6-新特性" tabindex="-1">es6 新特性 <a class="header-anchor" href="#es6-新特性" aria-hidden="true">#</a></h2><p>模版字符串、箭头函数、解构、扩展运算符、函数默认参数、块级作用域、类、对象字面量、导入/导出</p><h2 id="类的用法" tabindex="-1">类的用法 <a class="header-anchor" href="#类的用法" aria-hidden="true">#</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ClassName</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">method_1</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">displayName</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Point</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">method_2</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ClassName.method_2() 静态方法调用</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Runoob</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ClassName</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">age</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">super</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//必须写在第一行</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">age</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="导入-导出的用法" tabindex="-1">导入/导出的用法 <a class="header-anchor" href="#导入-导出的用法" aria-hidden="true">#</a></h2><ol><li>在一个文件或模块中 export 可以有多个，但 export default 仅有一个</li><li>通过 export 方式导出，在导入时要加{），而 export default 则不需要</li></ol><ul><li>export</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// a.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">“小生方勤”</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// b.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">str</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">//导入的时候需要花括号</span></span>
<span class="line"></span></code></pre></div><ul><li>export default</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// a.js</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> str</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">小生方勤</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">；</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> str</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// b.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">； </span><span style="color:#676E95;font-style:italic;">// 导入的时候无需花括号</span></span>
<span class="line"></span></code></pre></div><h2 id="call、apply、bind-区别" tabindex="-1">call、apply、bind 区别 <a class="header-anchor" href="#call、apply、bind-区别" aria-hidden="true">#</a></h2><p>相同点：都是重定向 this 指针的方法。<br> 不同点：apply 是数组，而 call、bind 是参数列表，且 apply 和 call 是一次性传入参数，而 bind 可以分为多次传入。bind 是返回绑定 this 之后的函数，便于稍后调用；apply 、call 则是立即执行 。</p><h2 id="改变-this-指向的有哪些" tabindex="-1">改变 this 指向的有哪些？ <a class="header-anchor" href="#改变-this-指向的有哪些" aria-hidden="true">#</a></h2><p>call、apply、bind、new</p><h2 id="new-操作符做了什么" tabindex="-1">new 操作符做了什么 <a class="header-anchor" href="#new-操作符做了什么" aria-hidden="true">#</a></h2><p>在内存中创建一个新对象。<br> 将新对象内部的 <strong>proto</strong> 赋值为构造函数的 prototype 属性。<br> 将构造函数内部的 this 被赋值为新对象（即 this 指向新对象）。<br> 执行构造函数内部的代码（给新对象添加属性）。<br> 如果构造函数返回非空对象，则返回该对象。否则返回 this。</p><h2 id="如何实现继承" tabindex="-1">如何实现继承 <a class="header-anchor" href="#如何实现继承" aria-hidden="true">#</a></h2><p>原型链继承、构造函数继承、寄生组合式继承、ES6 中 class 的继承</p><h2 id="for-in-和-for-of-的区别" tabindex="-1">for...in 和 for...of 的区别 <a class="header-anchor" href="#for-in-和-for-of-的区别" aria-hidden="true">#</a></h2><p><code>for...in</code> 遍历对象，下标<br><code>for...of</code> 遍历数组，值</p><h2 id="什么是原型链" tabindex="-1">什么是原型链 <a class="header-anchor" href="#什么是原型链" aria-hidden="true">#</a></h2><p>实例会查看自己是否有这个属性，如果没有的话会通过<strong>proto</strong>属性找原型对象， 这样一环扣一环就是原型链</p><h2 id="在哪个生命周期内调用异步请求" tabindex="-1">在哪个生命周期内调用异步请求 <a class="header-anchor" href="#在哪个生命周期内调用异步请求" aria-hidden="true">#</a></h2><ul><li>能更快获取到服务端数据，减少页面  loading 时间</li><li>ssr  不支持 beforeMount 、mounted 钩子函数，所以放在 created 中有助于一致性 mounted 中的请求有可能导致页面闪动</li></ul><h2 id="简述-vue-响应式原理" tabindex="-1">简述 Vue 响应式原理 <a class="header-anchor" href="#简述-vue-响应式原理" aria-hidden="true">#</a></h2><p>采用数据劫持并结合了发布者-订阅者模式，通过 Object.defineProperty()来劫持各个属性的 setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。</p><h2 id="说一下-v-model-的原理" tabindex="-1">说一下 v-model 的原理 <a class="header-anchor" href="#说一下-v-model-的原理" aria-hidden="true">#</a></h2><p><code>v-model</code>本质就是一个语法糖，可以看成是<code>value + input</code>方法的语法糖。 可以通过 model 属性的<code>prop</code>和<code>event</code>属性来进行自定义。原生的 v-model，会根据标签的不同生成不同的事件和属性。</p><h2 id="vue-组件中-data-为什么必须是函数" tabindex="-1">Vue 组件中 data 为什么必须是函数 <a class="header-anchor" href="#vue-组件中-data-为什么必须是函数" aria-hidden="true">#</a></h2><p>防止多个组件实例对象之间共用一个 data，产生数据污染</p><h2 id="vue-生命周期钩子函数有哪些" tabindex="-1">vue 生命周期钩子函数有哪些 <a class="header-anchor" href="#vue-生命周期钩子函数有哪些" aria-hidden="true">#</a></h2><ol><li>在 beforeCreate 时，data 和 methods 中的数据都还没有没初始化</li><li>在 created 中,data 和 methods 都已经被初始化好了!如果要调用 methods 中的方法，或者操作 data 中的数据,最早，只能在 created 中操作,created 通常用于异步请求，若想获取 dom 需要用 this.$nextTick</li><li>如果要通过某些插件操作页面上的 DOM 节点了，最早要在 mounted 中进行 <img src="`+t+`" alt="16ca74f183827f46 2498×2798.png"></li></ol><h2 id="组件之间是怎么通信的" tabindex="-1">组件之间是怎么通信的 <a class="header-anchor" href="#组件之间是怎么通信的" aria-hidden="true">#</a></h2><p><code>props / $emit</code> 适用 父子组件通信<br><code>ref</code> 与 <code>$parent / $children</code> 适用 父子组件通信<br><code>EventBus （$emit / $on）</code> 适用于 父子、隔代、兄弟组件通信<br><code>$attrs</code>/<code>$listeners</code> 适用于 隔代组件通信<br><code>provide / inject</code> 适用于 隔代组件通信<br> Vuex 适用于 父子、隔代、兄弟组件通信</p><h2 id="vue-执行顺序" tabindex="-1">vue 执行顺序 <a class="header-anchor" href="#vue-执行顺序" aria-hidden="true">#</a></h2><p>inject&gt;state&gt;props&gt;methods&gt;data&gt;computed&gt;watch&gt;provide</p><h2 id="vue-核心特性" tabindex="-1">Vue 核心特性 <a class="header-anchor" href="#vue-核心特性" aria-hidden="true">#</a></h2><p>数据驱动（MVVM)、组件化、指令系统</p><h2 id="vue-router-的导航方法" tabindex="-1">Vue Router 的导航方法 <a class="header-anchor" href="#vue-router-的导航方法" aria-hidden="true">#</a></h2><p>push、replace、go</p><h2 id="query传参和params传参区别" tabindex="-1">query传参和params传参区别 <a class="header-anchor" href="#query传参和params传参区别" aria-hidden="true">#</a></h2><table><thead><tr><th>query传参</th><th>params传参</th></tr></thead><tbody><tr><td>name和path都行</td><td>只能name</td></tr><tr><td>url会带上参数</td><td>url不会带上参数，刷新就没有了</td></tr><tr><td>通过this.$route.query获取</td><td>通过this.$route.params获取</td></tr></tbody></table><h2 id="v-if-和-v-for-为什么不能放在一起" tabindex="-1">v-if 和 v-for 为什么不能放在一起 <a class="header-anchor" href="#v-if-和-v-for-为什么不能放在一起" aria-hidden="true">#</a></h2><p>会先循环后判断，造成资源消耗</p><h2 id="v-if-和-v-for-哪个优先级高" tabindex="-1">v-if 和 v-for 哪个优先级高 <a class="header-anchor" href="#v-if-和-v-for-哪个优先级高" aria-hidden="true">#</a></h2><p>在 vue2 中 v-for 优先级高,在 vue3 中 v-if 优先级高</p><h2 id="key-的作用" tabindex="-1">key 的作用 <a class="header-anchor" href="#key-的作用" aria-hidden="true">#</a></h2><p>为了更好的更新虚拟 dom</p><h2 id="为什么不建议用-index-作为-key" tabindex="-1">为什么不建议用 index 作为 key? <a class="header-anchor" href="#为什么不建议用-index-作为-key" aria-hidden="true">#</a></h2><p>使用 index 作为 key 和没写基本上没区别，因为不管数组的顺序怎么颠倒，index 都是 0, 1, 2...这样排列，导致 Vue 会复用错误的旧子节点，做很多额外的工作</p><h2 id="query传参和params传参区别-1" tabindex="-1">query传参和params传参区别 <a class="header-anchor" href="#query传参和params传参区别-1" aria-hidden="true">#</a></h2><table><thead><tr><th>query传参</th><th>params传参</th></tr></thead><tbody><tr><td>name和path都行</td><td>只能name</td></tr><tr><td>url会带上参数</td><td>url不会带上参数，刷新就没有了</td></tr><tr><td>通过this.$route.query获取</td><td>通过this.$route.params获取</td></tr></tbody></table><h2 id="computed-和-watch-methods-有什么区别" tabindex="-1">computed 和 watch,methods 有什么区别 <a class="header-anchor" href="#computed-和-watch-methods-有什么区别" aria-hidden="true">#</a></h2><p>computed 有缓存性 ，一个数据受多个数据影响<br> watch 无缓存性 ，一个数据影响多个数据<br> methods 无缓存性，只要发生重新渲染，methods 调用总会执行该函数</p><h2 id="那你能讲一讲-mvvm-吗" tabindex="-1">那你能讲一讲 MVVM 吗 <a class="header-anchor" href="#那你能讲一讲-mvvm-吗" aria-hidden="true">#</a></h2><p>MVVM 是<code>Model-View-ViewModel</code>缩写，Model 层代表数据模型，View 代表 UI 组件，ViewModel 是 View 和 Model 层的桥梁，数据会绑定到 viewModel 层并自动将数据渲染到页面中，视图变化的时候会通知 viewModel 层更新数据。</p><h2 id="双向绑定的原理" tabindex="-1">双向绑定的原理 <a class="header-anchor" href="#双向绑定的原理" aria-hidden="true">#</a></h2><p>实际是 v-bind:xxx 和 v-on:xxx 的语法糖。</p><h2 id="keep-alive-了解吗" tabindex="-1">keep-alive 了解吗 <a class="header-anchor" href="#keep-alive-了解吗" aria-hidden="true">#</a></h2><p><code>keep-alive</code>可以实现组件缓存，当组件切换时不会对当前组件进行卸载。 常用的两个属性<code>include/exclude</code>，允许组件有条件的进行缓存。 两个生命周期<code>activated/deactivated</code>，用来得知当前组件是否处于活跃状态。</p><h2 id="vuex" tabindex="-1">vuex <a class="header-anchor" href="#vuex" aria-hidden="true">#</a></h2><p>是什么：多组件共享数据抽离出来<br> 为什么：因为普通的传值比较复杂不便于维护,用于组件之间的传值</p><h2 id="watch-怎么深度监听对象变化" tabindex="-1">watch 怎么深度监听对象变化 <a class="header-anchor" href="#watch-怎么深度监听对象变化" aria-hidden="true">#</a></h2><p>deep 设置为 true 就可以监听到对象的变化</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> vm </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Vue</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">el</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">#first</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">msg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">北京</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">watch</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">msg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">handler</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">newMsg</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">oldMsg</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">newMsg</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">immediate</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">deep</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="如何解决-vue-中给对象添加新属性界面不刷新" tabindex="-1">如何解决 Vue 中给对象添加新属性界面不刷新? <a class="header-anchor" href="#如何解决-vue-中给对象添加新属性界面不刷新" aria-hidden="true">#</a></h2><p>可以通过$set()、$forcecUpdated()、Object.assign()解决</p><h2 id="数组中的哪些方法会触发视图的更新" tabindex="-1">数组中的哪些方法会触发视图的更新? <a class="header-anchor" href="#数组中的哪些方法会触发视图的更新" aria-hidden="true">#</a></h2><p>改变元数组都会触发视图的更新</p><h2 id="改变元数组的方法有哪些" tabindex="-1">改变元数组的方法有哪些？ <a class="header-anchor" href="#改变元数组的方法有哪些" aria-hidden="true">#</a></h2><p>push、pop、shift、unshift、reverse、splice、sort、fill （8 个）</p><h2 id="vue3-0-的六大亮点" tabindex="-1">vue3.0 的六大亮点 <a class="header-anchor" href="#vue3-0-的六大亮点" aria-hidden="true">#</a></h2><p>1、组合 API 2、先进的组件 3、更好的支持 ts 4、性能提升 5、按需编译 6、自定义渲染的 API</p><h2 id="uniapp-生命周期执行顺序" tabindex="-1">uniapp 生命周期执行顺序 <a class="header-anchor" href="#uniapp-生命周期执行顺序" aria-hidden="true">#</a></h2><p>1.渲染完成之前，即mounted之前<br> 组件（父子组件都是）生命周期优先于页面生命周期；父组件，子组件直接的顺序是父组件优先于子组件。<br> 执行过程：<br> 父beforeCreate=&gt;父created=&gt;父beforeMount=&gt;子beforeCreate=&gt;子created=&gt;子beforeMount=&gt;页面onLoad=&gt;页面onShow；<br> 2.渲染完成时，即beforeDestroy之前<br> 组件（父子组件都是）生命周期优先于页面生命周期；父组件，子组件直接的顺序是子组件优先于父组件。<br> 子mounted=&gt;父mounted=&gt;页面onReady；<br> 3.销毁过程：<br> 页面生命周期优先于组件生命周期（父子组件都是）；父组件，子组件直接的顺序是子组件优先于父组件<br> 页面onUnload=&gt;子beforeDestroy=&gt;子destroyed=&gt;父beforeDestroy=&gt;父destroyed</p><p>beforeCreate=&gt;created=&gt;beforeMount=&gt;onLoad=&gt;onShow=&gt;mounted=&gt;onReady<br> 异步请求在onLoad执行，获取dom元素在onReady执行</p><h2 id="webpack-的基本功能" tabindex="-1">Webpack 的基本功能 <a class="header-anchor" href="#webpack-的基本功能" aria-hidden="true">#</a></h2><p>代码转换、文件优化、代码分割、模块合并、自动刷新、代码校验、自动发布</p><h2 id="webpack-常见的-loader" tabindex="-1">Webpack 常见的 Loader <a class="header-anchor" href="#webpack-常见的-loader" aria-hidden="true">#</a></h2><p>less-loader、css-loader、style-loader、postcss-loader、file-loader、url-loader、 image-webpack-loader、eslint-loader、vue-loader</p><h2 id="常见的-plugin" tabindex="-1">常见的 Plugin <a class="header-anchor" href="#常见的-plugin" aria-hidden="true">#</a></h2><ol><li><p>html-webpack-plugin：根据模板页面生成打包的 html 页面</p></li><li><p>mini-css-extract-plugin: 分离样式文件，CSS 提取为独立文件，支持按需加载</p></li><li><p>clean-webpack-plugin: 目录清理</p></li><li><p>copy-webpack-plugin: 拷贝文件</p></li></ol><h2 id="网站性能优化" tabindex="-1">网站性能优化 <a class="header-anchor" href="#网站性能优化" aria-hidden="true">#</a></h2><ul><li>网络请求优化</li></ul><p>减少请求数，开启 gzip 压缩，缓存，采用 CDN 加速加快访问速度、避免重定向</p><ul><li>静态资源优化</li></ul><p>代码压缩、图片压缩、图片懒加载、字体图标、webp（ios webview中有兼容性问题）</p><ul><li>HTML优化</li></ul><p>避免使用iFrame、避免使用 table 布局、使用骨架屏</p><ul><li>CSS优化</li></ul><p>避免使用通配符*、避免使用!impotant、避免使用css表达式、避免重排重绘，使用 CSS3 GPU 加速</p><ul><li>js 优化</li></ul><p>节流与防抖、虚拟列表、对于包含大量数据而不需要操作的对象，可以使用<code>Object.freeze</code>冻结对象、webworker、IntersectionObserver、requestAnimationFrame</p><ul><li>打包优化</li></ul><p>按需加载、路由懒加载、Webpack拆包、将小图片转换为base64字符串</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">// 优化场景</span></span>
<span class="line"><span style="color:#A6ACCD;">取消请求：页面跳转、tab栏</span></span>
<span class="line"><span style="color:#A6ACCD;">防抖：搜索框、登录、发短信等按钮、生成订单（请求一次）</span></span>
<span class="line"><span style="color:#A6ACCD;">截流：窗口调整、页面滚动、抢购和疯狂点击，拖拽（定时请求）</span></span>
<span class="line"><span style="color:#A6ACCD;">懒加载：图片在可视区请求</span></span>
<span class="line"><span style="color:#A6ACCD;">imprort 不允许 加载失败</span></span>
<span class="line"><span style="color:#A6ACCD;">require 允许 加载失败</span></span>
<span class="line"><span style="color:#A6ACCD;">promise.all 用于要做的事情需要2个请求才能完成</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="git-常用命令" tabindex="-1">git 常用命令 <a class="header-anchor" href="#git-常用命令" aria-hidden="true">#</a></h2><p>git init、git clone、git status、git add、git commit -m、git log、git push、git pull...</p><h2 id="其它" tabindex="-1">其它 <a class="header-anchor" href="#其它" aria-hidden="true">#</a></h2><p>v-if 适合不变的数据如请求 API 动态显示/隐藏<br> this 在严格模式下返回 undefined<br> null==undefined 是因为都转为 false 所以为 true<br> 相等运算符会进行类型转换，全等运算符不会<br> null 和 undefined 除自身外比较无法转换 &#39;&#39;==0 true<br> nan 不等于自身<br> vue.config 改动需要重启项目</p>`,155),c=[r];function i(d,y,F,h,D,u){return l(),a("div",null,c)}const b=s(p,[["render",i]]);export{A as __pageData,b as default};
